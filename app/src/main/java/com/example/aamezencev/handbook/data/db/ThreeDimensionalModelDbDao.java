package com.example.aamezencev.handbook.data.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREE_DIMENSIONAL_MODEL_DB".
*/
public class ThreeDimensionalModelDbDao extends AbstractDao<ThreeDimensionalModelDb, Long> {

    public static final String TABLENAME = "THREE_DIMENSIONAL_MODEL_DB";

    /**
     * Properties of entity ThreeDimensionalModelDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PrimaryKey = new Property(0, Long.class, "primaryKey", true, "_id");
        public final static Property DataHierarchyId = new Property(1, long.class, "dataHierarchyId", false, "DATA_HIERARCHY_ID");
        public final static Property ModelArray = new Property(2, byte[].class, "modelArray", false, "MODEL_ARRAY");
    }

    private Query<ThreeDimensionalModelDb> dataHierarchyDb_ThreeDimensionalModelsQuery;

    public ThreeDimensionalModelDbDao(DaoConfig config) {
        super(config);
    }
    
    public ThreeDimensionalModelDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREE_DIMENSIONAL_MODEL_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: primaryKey
                "\"DATA_HIERARCHY_ID\" INTEGER NOT NULL ," + // 1: dataHierarchyId
                "\"MODEL_ARRAY\" BLOB);"); // 2: modelArray
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREE_DIMENSIONAL_MODEL_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThreeDimensionalModelDb entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
        stmt.bindLong(2, entity.getDataHierarchyId());
 
        byte[] modelArray = entity.getModelArray();
        if (modelArray != null) {
            stmt.bindBlob(3, modelArray);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThreeDimensionalModelDb entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
        stmt.bindLong(2, entity.getDataHierarchyId());
 
        byte[] modelArray = entity.getModelArray();
        if (modelArray != null) {
            stmt.bindBlob(3, modelArray);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ThreeDimensionalModelDb readEntity(Cursor cursor, int offset) {
        ThreeDimensionalModelDb entity = new ThreeDimensionalModelDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // primaryKey
            cursor.getLong(offset + 1), // dataHierarchyId
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2) // modelArray
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThreeDimensionalModelDb entity, int offset) {
        entity.setPrimaryKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataHierarchyId(cursor.getLong(offset + 1));
        entity.setModelArray(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThreeDimensionalModelDb entity, long rowId) {
        entity.setPrimaryKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThreeDimensionalModelDb entity) {
        if(entity != null) {
            return entity.getPrimaryKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThreeDimensionalModelDb entity) {
        return entity.getPrimaryKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "threeDimensionalModels" to-many relationship of DataHierarchyDb. */
    public List<ThreeDimensionalModelDb> _queryDataHierarchyDb_ThreeDimensionalModels(long dataHierarchyId) {
        synchronized (this) {
            if (dataHierarchyDb_ThreeDimensionalModelsQuery == null) {
                QueryBuilder<ThreeDimensionalModelDb> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DataHierarchyId.eq(null));
                dataHierarchyDb_ThreeDimensionalModelsQuery = queryBuilder.build();
            }
        }
        Query<ThreeDimensionalModelDb> query = dataHierarchyDb_ThreeDimensionalModelsQuery.forCurrentThread();
        query.setParameter(0, dataHierarchyId);
        return query.list();
    }

}
